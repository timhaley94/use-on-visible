{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["isVisible","el","right","window","top","left","bottom","elRef","cb","deps","useState","callback","useCallback","useEffect","handle","useOnScroll","state","setState","App","ref","createRef","count","setCount","useOnVisible","role","aria-label","ReactDOM","render","document","getElementById"],"mappings":"8LAEA,SAASA,EAAUC,GAAI,MACgBA,EAArC,wBAAM,EADe,EACf,MADe,EACf,SADe,EACf,KAAqBC,EADN,EACMA,MAE3B,SAAKC,OAAD,cAAwBA,OAA5B,cAKEC,MACAC,GADAD,GAEAE,GAAUH,OAFVC,aAGAF,GAASC,OAJX,Y,MA+BF,SAAsBI,EAAOC,EAAIC,GAAM,MACXC,oBAA1B,GADqC,mBAC/B,EAD+B,KAC/B,EAD+B,KAG/BC,EAAWC,sBAAYJ,EAA7B,IA1BF,SAAqBA,GACnBK,qBAAU,WAGR,IAAMC,EAAS,WAGXX,8BAA6B,WAE3BK,QAUN,OAFAM,IACAX,oCACO,kBAAMA,oCAAb,MACC,CAnBHU,IAwCAE,CAbeH,uBAAY,WACzB,IAAMX,EAAKM,EAAX,QAEA,KACOS,GAAShB,EAAd,IACEiB,MACAN,KACSK,IAAUhB,EAAd,IACLiB,SAGH,CAACV,EAXJ,MCrBaW,EArBH,WACV,IAAMC,EAAMC,sBADI,EAEUV,mBAAS,GAFnB,mBAETW,EAFS,KAEFC,EAFE,KAUhB,OANAC,EACEJ,GACA,kBAAMG,EAASD,EAAQ,KACvB,CAACA,IAID,6BACE,6BACE,yCACA,0BAAMG,KAAK,MAAMC,aAAW,QAA5B,iBAEF,2DAAkCJ,EAAlC,aCbNK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.80642e16.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nfunction isVisible(el) {\n  const { top, bottom, left, right } = el.getBoundingClientRect();\n\n  if (!window.innerHeight || !window.innerWidth) {\n    return false;\n  }\n\n  return (\n    top >= 0 &&\n    left >= 0 &&\n    bottom <= window.innerHeight &&\n    right <= window.innerWidth\n  );\n}\n\nfunction useOnScroll(cb) {\n  useEffect(() => {\n    let firing = false;\n\n    const handle = () => {\n      if (!firing) {\n        // requestAnimationFrame trottles this callback.\n        window.requestAnimationFrame(() => {\n          firing = false;\n          cb();\n        });\n\n        firing = true;\n      }\n    };\n\n    // Call handle once when listener is registered.\n    handle();\n    window.addEventListener('scroll', handle);\n    return () => window.removeEventListener('scroll', handle);\n  }, [cb]);\n}\n\nfunction useOnVisible(elRef, cb, deps) {\n  const [state, setState] = useState(false);\n\n  const callback = useCallback(cb, deps);\n\n  const handle = useCallback(() => {\n    const el = elRef.current;\n\n    if (el) {\n      if (!state && isVisible(el)) {\n        setState(true);\n        callback();\n      } else if (state && !isVisible(el)) {\n        setState(false);\n      }\n    }\n  }, [elRef, callback]);\n\n  useOnScroll(handle);\n}\n\nexport default useOnVisible;\n","import React, { useState, createRef } from 'react'\nimport useOnVisible from 'use-on-visible'\n\nconst App = () => {\n  const ref = createRef();\n  const [count, setCount] = useState(0);\n\n  useOnVisible(\n    ref,\n    () => setCount(count + 1),\n    [count],\n  );\n\n  return (\n    <div>\n      <div>\n        <p>Scroll me!</p>\n        <span role=\"img\" aria-label=\"eyes\">ðŸ‘€</span>\n      </div>\n      <p>The eyes have become visible { count } times!</p>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}